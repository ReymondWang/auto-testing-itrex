2024-05-05 19:20:19 | INFO | gradio_web_server | Models: ['Intel/neural-chat-7b-v3-1']
2024-05-05 19:20:19 | ERROR | stderr | /Users/wangyanan/Develop/Python/auto-testing/intel/codegen/frontend/app.py:593: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.
2024-05-05 19:20:19 | ERROR | stderr |   model_selector = gr.Dropdown(
2024-05-05 19:20:19 | ERROR | stderr | /Users/wangyanan/Develop/Python/auto-testing/intel/codegen/frontend/app.py:600: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.
2024-05-05 19:20:19 | ERROR | stderr |   chatbot = gr.Chatbot(elem_id="chatbot", visible=False).style(height=550)
2024-05-05 19:20:19 | ERROR | stderr | /Users/wangyanan/Develop/Python/auto-testing/intel/codegen/frontend/app.py:603: GradioDeprecationWarning: The `style` method is deprecated. Please set these arguments in the constructor instead.
2024-05-05 19:20:19 | ERROR | stderr |   textbox = gr.Textbox(
2024-05-05 19:20:19 | INFO | stdout | Running on local URL:  http://0.0.0.0:7860
2024-05-05 19:20:19 | INFO | stdout | 
2024-05-05 19:20:19 | INFO | stdout | To create a public link, set `share=True` in `launch()`.
2024-05-05 19:20:29 | INFO | gradio_web_server | load_demo. ip: 127.0.0.1. params: {}
2024-05-05 19:21:51 | INFO | gradio_web_server | add_text. ip: 127.0.0.1. len: 1389
2024-05-05 19:21:51 | INFO | gradio_web_server | http_bot. ip: 127.0.0.1
2024-05-05 19:21:51 | INFO | gradio_web_server | ==== request ====
{'model': 'Intel/neural-chat-7b-v3-1', 'messages': [{'role': 'system', 'content': '### System:\n    - You are an expert of using python and selenium.\n    - You answer questions.\n    - You are excited to be able to help the user, but will refuse to do anything that could be considered harmful to the user.\n    - You are more than just an information source, you are also able to write programs of automation testing.</s>\n'}, {'role': 'user', 'content': '<html><body class="hold-transition login-page"><div id="login-bar"><div id="login-company-logo"></div></div><div id="login-span"></div><div id="login-bg"><div id="login-body"><div class="login-box-body"><p class="login-box-msg"></p><form id="loginForm" name="loginform"><div class="form-group has-feedback"><input class="form-control" id="txtUserName" name="USERNAME" placeholder="用户名" type="text" value=""/><input class="form-control" id="txtCode" name="code" type="hidden" value=""/></div><div class="form-group has-feedback password"><input autocomplete="off" class="form-control" id="txtPassword" name="PASSWORD" placeholder="密码" type="password" value=""/><i class="reveal with"></i></div><div class="row"><div class="col-xs-8"><div class="checkbox"><a> 忘记密码？ </a></div></div><div class="col-xs-4"><button class="btn btn-primary btn-block btn-flat"> 登录 </button></div></div><input name="JavaScriptEnabled" type="hidden" value="Y"/></form></div><div><div><div></div><div><div id="login-slogan"></div><div id="login-logo-body"></div></div></div><div><img src="/cranberry/images/hs-login-adv.png"/></div></div></div></div><div class="login-adv"><div><div class="adv-content"><span> 最新资讯 </span><p> 获得最新的HyperStore新闻，全渠道营销资讯、博客、事件、网络研讨会和奖项。 </p></div></div><div><div class="adv-content"><span> 增值服务 </span><p> 获得整合营销运营服务。 </p></div></div></div></body></html> 请生成自动化测试的PO对象，并且以Python格式仅返回代码'}], 'temperature': 0.001, 'top_p': 0.95, 'max_tokens': 512, 'stream': True}
2024-05-05 19:23:40 | INFO | gradio_web_server | To generate the Python code for creating the PO objects and return it in a format that can be used for automation testing, you can use the following code: from selenium import webdriver from selenium.webdriver.common.by import By from selenium.webdriver.support.ui import WebDriverWait from selenium.webdriver.support import expected_conditions as EC class LoginPage: def __init__(self, driver): self.driver = driver self.login_bar = self.driver.find_element(By.ID, 'login-bar') self.login_company_logo = self.driver.find_element(By.ID, 'login-company-logo') self.login_span = self.driver.find_element(By.ID, 'login-span') self.login_bg = self.driver.find_element(By.ID, 'login-bg') self.login_body = self.driver.find_element(By.ID, 'login-body') self.login_box_body = self.driver.find_element(By.CLASS_NAME, 'login-box-body') self.login_box_msg = self.driver.find_element(By.CLASS_NAME, 'login-box-msg') self.login_form = self.driver.find_element(By.ID, 'loginForm') self.txt_user_name = self.driver.find_element(By.ID, 'txtUserName') self.txt_code = self.driver.find_element(By.ID, 'txtCode') self.txt_password = self.driver.find_element(By.ID, 'txtPassword') self.reveal_with = self.driver.find_element(By.CLASS_NAME, 'reveal-with') self.btn_login = self.driver.find_element(By.ID, 'btnLogin') self.btn_forgot_password = self.driver.find_element(By.ID, 'btnForgotPassword') self.btn_register = self.driver.find_element(By.ID, 'btnRegister') self.btn_close = self.driver.find_element(By.ID, 'btnClose') class HomePage: def __init__(self, driver): self.driver = driver self.home_bar = self.driver.find_element(By.ID, 'home-bar') self.home_company_logo = self.driver.find_element(By.ID, 'home-company-logo') self.home_span = self.driver.find_element(By.ID, 'home-span') self.home_bg = self.driver.find_element(By.ID, 'home-bg') self.home_body = self.driver.find_element(By.ID, 'home-body') self.home_box_body = self.driver.find_element(By.CLASS_NAME, 'home-box-body') self.home_box_msg = self.driver.find_element(By.CLASS_NAME, 'home-box-msg') self.home_form = self.driver.find_element(By.ID, 'homeForm') self.txt_user_name = self.driver.find_element(By.ID, 'txtUserName') self.txt_code = self.driver.find_element(By.ID, 'txtCode') self.txt_password = self.driver.find_element(By.ID, 'txtPassword') self.reveal_with = self.driver.find_element(By.CLASS_NAME, 'reveal-with') self.btn_login = self.driver.find_element(By.ID, 'btnLogin') self.btn_forgot_password = self.driver.find_element(By.ID, 'btnForgotPassword') self.btn_register = self.driver.find_element(By.ID, 'btnRegister') self.btn_close = self.driver.find_element(By.ID, 'btnClose') def get_home_bar(self): return self.home_bar def get_home_company_logo(self): return self.home_company_logo
2024-05-05 19:37:07 | INFO | stdout | Keyboard interruption in main thread... closing server.
